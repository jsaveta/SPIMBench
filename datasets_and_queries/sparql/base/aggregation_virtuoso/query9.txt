define input:inference "ldbc"

PREFIX bbcevent:<http://www.bbc.co.uk/ontologies/event/> 
PREFIX geo-pos:<http://www.w3.org/2003/01/geo/wgs84_pos#> 
PREFIX bbc:<http://www.bbc.co.uk/ontologies/bbc/> 
PREFIX time:<http://www.w3.org/2006/time#> 
PREFIX event:<http://purl.org/NET/c4dm/event.owl#> 
PREFIX music-ont:<http://purl.org/ontology/mo/> 
PREFIX rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#> 
PREFIX foaf:<http://xmlns.com/foaf/0.1/> 
PREFIX provenance:<http://www.bbc.co.uk/ontologies/provenance/> 
PREFIX owl:<http://www.w3.org/2002/07/owl#> 
PREFIX cms:<http://www.bbc.co.uk/ontologies/cms/> 
PREFIX news:<http://www.bbc.co.uk/ontologies/news/> 
PREFIX cnews:<http://www.bbc.co.uk/ontologies/news/cnews/> 
PREFIX cconcepts:<http://www.bbc.co.uk/ontologies/coreconcepts/> 
PREFIX dbp-prop:<http://dbpedia.org/property/> 
PREFIX geonames:<http://sws.geonames.org/> 
PREFIX rdfs:<http://www.w3.org/2000/01/rdf-schema#> 
PREFIX domain:<http://www.bbc.co.uk/ontologies/domain/> 
PREFIX dbpedia:<http://dbpedia.org/resource/> 
PREFIX geo-ont:<http://www.geonames.org/ontology#> 
PREFIX bbc-pont:<http://purl.org/ontology/po/> 
PREFIX tagging:<http://www.bbc.co.uk/ontologies/tagging/> 
PREFIX sport:<http://www.bbc.co.uk/ontologies/sport/> 
PREFIX skosCore:<http://www.w3.org/2004/02/skos/core#> 
PREFIX dbp-ont:<http://dbpedia.org/ontology/> 
PREFIX xsd:<http://www.w3.org/2001/XMLSchema#> 
PREFIX core:<http://www.bbc.co.uk/ontologies/coreconcepts/> 
PREFIX curric:<http://www.bbc.co.uk/ontologies/curriculum/> 
PREFIX skos:<http://www.w3.org/2004/02/skos/core#> 
PREFIX cwork:<http://www.bbc.co.uk/ontologies/creativework/> 
PREFIX fb:<http://rdf.freebase.com/ns/>

#  Query name : query9
#  Query Description : 
#  Retrieve similar creative works regarding the ’things’ they are about or mention.
#  Calculates a score for a particular Creative Work, about most similar articles
#  Creative Works with same abouts count for 2, mentioning the about counts for 1, a mentions in common counts for 0.5
#  reasoning : rdfs:subPropertyOf

#  Choke Points : 
#    - Optimizer should consider cardinality of star-shaped sub-queries for choosing the optimal join ordering.
#    - Optimizer should identify the possibility of asynchronous execution of the  aggregate sub-queries.
#    - Optimizer should consider the selectivity of the DISTINCT for choosing the right execution plan. The distinct's state 
#      should be shared between threads or should be merged after the top order sort.

SELECT ?other ?dt ((?cnt_2 * 2 + ?cnt_1 + ?cnt_0_5 * 5e-1) AS ?score) 
WHERE {
  {
    SELECT (COUNT(*) AS ?cnt_2) 
    WHERE { 
      ?other cwork:about ?oa . 
      {{{cwUri}}} cwork:about ?oa .
    }      
  } .
  {
     SELECT (COUNT(*) AS ?cnt_1) 
     WHERE {
       ?other cwork:mentions ?oa . 
       {{{cwUri}}} cwork:about ?oa .
     }      
  } .
  {
     SELECT (COUNT(*) AS ?cnt_0_5)
     WHERE { 
       ?other cwork:mentions ?om . 
       {{{cwUri}}} cwork:mentions ?om .
     }      
  } .
  { 
    SELECT DISTINCT ?other ?dt
    WHERE {
      {{{cwUri}}} cwork:tag ?tag .
      ?other cwork:tag ?tag .
      ?other cwork:dateModified ?dt .
    }
  }
}
ORDER BY DESC(?score) DESC(?dt)
LIMIT 10